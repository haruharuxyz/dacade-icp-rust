type Error = variant {
  NotFound : record { msg : text };
  UploadFail : record { msg : text };
  UpdateFail : record { msg : text };
};
type Result = variant { Ok : Song; Err : Error };
type Song = record {
  id : nat64;
  title : text;
  updated_at : opt nat64;
  duration : nat64;
  release_date : text;
  mime_type : text;
  file_name : text;
  genre : text;
  singer : text;
};
type SongPayload = record {
  title : text;
  duration : nat64;
  release_date : text;
  mime_type : text;
  file_name : text;
  genre : text;
  singer : text;
};
type SongUpdate = record {
  title : opt text;
  duration : opt nat64;
  release_date : opt text;
  mime_type : opt text;
  file_name : opt text;
  genre : opt text;
  singer : opt text;
};
service : {
  delete_song : (nat64) -> (Result);
  get_song : (nat64) -> (Result) query;
  update_song : (nat64, SongUpdate) -> (Result);
  upload_song : (SongPayload) -> (Result);
}